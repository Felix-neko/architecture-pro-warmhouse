@startuml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Sequence.puml

SHOW_INDEX()
SHOW_ELEMENT_DESCRIPTIONS()

'Person(customer, "Customer", "A bank customer")
'System_Boundary(banking, "Internet Banking")
'    Container(web_app, "Web Application", "Java/Spring", "Delivers static content")
'    Container(api, "API Application", "Java/Spring", "Provides banking functionality via API")
'Boundary_End()
'System(email, "E-mail System", "Sends e-mails to customers")
'
'Rel(customer, web_app, "Visits bigbank.com/ib using", "HTTPS")
'Rel(web_app, api, "Makes API calls to", "JSON/HTTPS")
'Rel(api, email, "Sends e-mail using", "SMTP")
'Rel(email, customer, "Sends e-mails to")


' Define participants using C4 elements
System_Ext(mqtt_sensors, "MQTT Sensors", "Environmental sensors, temperature, humidity, pressure sensors")
System_Ext(http_sensors, "HTTP Sensors", "Web-based sensors with REST APIs")
System(mqtt_broker, "MQTT Broker", "Message queuing service for sensor data")
Container(data_service, "Data Acquisition Service", "Node.js/Python", "Core service handling data collection and processing")
Container(task_scheduler, "Task Scheduler", "Cron/Queue", "Manages polling intervals and retry logic")
ContainerDb(timescale_db, "TimescaleDB", "PostgreSQL Extension", "Time-series database for sensor data storage")

' System boundary for internal components
System_Boundary(daq_system, "Data Acquisition System")
Container(data_processor, "Data Processor", "Stream Processing", "Validates, transforms, and enriches sensor data")
Container(error_handler, "Error Handler", "Retry Logic", "Manages failures and retry mechanisms")
Boundary_End()

== MQTT Push-Based Data Flow (Periodic) ==

' MQTT sensors periodically publish data
loop Every 30 seconds
    Rel(mqtt_sensors, mqtt_broker, "Publish sensor data", "MQTT/JSON\n{temp: 25.3, humidity: 60%, timestamp: ...}")

    ' Data acquisition service subscribes and processes
    Rel(mqtt_broker, data_service, "Subscribe to topics", "MQTT Subscribe\ntopics: sensors/+/data")

    alt Data validation successful
        Rel(data_service, data_processor, "Process sensor data", "Internal API\nValidate & transform")
        Rel(data_processor, timescale_db, "Insert processed data", "SQL INSERT\nINTO sensor_readings")
        note right: Batch insert for efficiency

    else Data validation failed
        Rel(data_service, error_handler, "Log validation error", "Error details & payload")
        Rel(error_handler, mqtt_broker, "Publish to error topic", "MQTT/errors/validation")
    end
end

' Task scheduler triggers HTTP polling
loop Every 5 minutes
    Rel(task_scheduler, data_service, "Trigger HTTP polling", "Internal Event\nschedule_id: http_poll_001")

'    ' Data service polls HTTP sensors
    par HTTP Sensor Polling (Parallel)
        Rel(data_service, http_sensors, "GET sensor data", "HTTP GET /api/sensors/1/data")
        Rel(http_sensors, data_service, "Return sensor data", "HTTP 200\n{value: 42.1, unit: 'celsius'}")
    and
        Rel(data_service, http_sensors, "GET sensor data", "HTTP GET /api/sensors/2/data")
'        Rel(http_sensors, data_service, "Return sensor data", "HTTP 200\n{value: 1013.25, unit: 'hPa'}")
    end

'    alt HTTP request successful
'        Rel(data_service, data_processor, "Process HTTP data", "Standardize format & add metadata")
'        Rel(data_processor, timescale_db, "Store processed data", "SQL INSERT\nINTO http_sensor_readings")
'
'    else HTTP request failed (timeout/error)
'        Rel(data_service, error_handler, "Handle HTTP error", "Error: 500/timeout")
'
'        alt Retry attempts < 3
'            Rel(error_handler, task_scheduler, "Schedule retry", "Exponential backoff\nDelay: 2^attempt * 30s")
'            note right: Retry with exponential backoff
'
'        else Max retries exceeded
'            Rel(error_handler, timescale_db, "Log failed attempt", "INSERT INTO error_log")
'            note right: Store for manual investigation
'        end
'    end
end



@enduml