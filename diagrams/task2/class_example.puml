@startuml FastAPI Router with Optional Fields

!theme blueprint

package "FastAPI Application" {

    class UserCreateRequest {
        +name: str
        +email: str
        +age: Optional[int] = None
        +phone: Optional[str] = None
        +bio: Optional[str] = None
        +is_active: Optional[bool] = None
    }

    class UserUpdateRequest {
        +name: Optional[str] = None
        +email: Optional[str] = None
        +age: Optional[int] = None
        +phone: Optional[str] = None
        +bio: Optional[str] = None
        +is_active: Optional[bool] = None
    }

    class UserResponse {
        +id: int
        +name: str
        +email: str
        +age: Optional[int] = None
        +phone: Optional[str] = None
        +bio: Optional[str] = None
        +is_active: bool
        +created_at: datetime
        +updated_at: Optional[datetime] = None
    }

    class UserRouter {
        +router: APIRouter
        --
        +create_user(user_data: UserCreateRequest): UserResponse
        +get_user(user_id: int): UserResponse
        +update_user(user_id: int, user_data: UserUpdateRequest): UserResponse
        +delete_user(user_id: int): dict
        +list_users(skip: int = 0, limit: int = 100): List[UserResponse]
    }

    class UserService {
        +create(user_data: UserCreateRequest): UserResponse
        +get_by_id(user_id: int): Optional[UserResponse]
        +update(user_id: int, user_data: UserUpdateRequest): Optional[UserResponse]
        +delete(user_id: int): bool
        +list_all(skip: int, limit: int): List[UserResponse]
    }

    class UserRepository {
        +db: Session
        --
        +create(user_data: dict): User
        +get_by_id(user_id: int): Optional[User]
        +update(user_id: int, user_data: dict): Optional[User]
        +delete(user_id: int): bool
        +get_all(skip: int, limit: int): List[User]
    }

    class User {
        +id: int
        +name: str
        +email: str
        +age: Optional[int]
        +phone: Optional[str]
        +bio: Optional[str]
        +is_active: bool
        +created_at: datetime
        +updated_at: Optional[datetime]
    }
}

' Relationships
UserRouter --> UserService : uses
UserRouter ..> UserCreateRequest : accepts
UserRouter ..> UserUpdateRequest : accepts
UserRouter ..> UserResponse : returns

UserService --> UserRepository : uses
UserService ..> UserCreateRequest : processes
UserService ..> UserUpdateRequest : processes
UserService ..> UserResponse : returns

UserRepository --> User : manages
UserRepository ..> User : CRUD operations

UserResponse --|> User : maps from
UserCreateRequest ..> User : creates
UserUpdateRequest ..> User : updates

note right of UserCreateRequest : "Optional fields with default None\nallow partial data submission"

note right of UserUpdateRequest : "All fields optional for PATCH\noperations - only update provided fields"

note bottom of UserResponse : "Optional fields reflected in response\nbased on database state"

@enduml