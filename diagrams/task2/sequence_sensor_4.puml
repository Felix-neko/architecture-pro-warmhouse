@startuml
' C4-PlantUML includes for styling and macros
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Sequence.puml

' Style and Layout
LAYOUT_WITH_LEGEND()
title C4 Sequence Diagram: FastAPI Async Request Handling

' Define Participants
Person(user, "User", "A user of our service.")
System_Boundary(c1, "Our FastAPI Application") {
    Container(fastapi_service, "FastAPI Web Service", "Python, FastAPI", "Handles incoming user requests.")
    Component(processing_service, "Data Processing Service", "Python, asyncio", "Handles business logic and external API calls.")
}
System(external_api, "External Data API", "An external source of data.")

' --- Diagram Flow ---

' 1. User sends a request to the FastAPI service
user -> fastapi_service: Sends HTTPS Request (e.g., GET /api/data)
activate fastapi_service #ADD1B2

note right of user
  The user's client waits for a
  response synchronously.
end note

' 2. FastAPI routes the request to the async endpoint handler
fastapi_service -> processing_service: process_data_request(...)
activate processing_service #E6E6FA

note right of fastapi_service
  This is an internal function call.
  The method is an `async def` method.
end note

' 3. The processing service makes an async call to the external API
' The ->> arrow indicates an asynchronous message
processing_service ->> external_api: GET /external/data
activate external_api #B4A7E5

note right of processing_service
  **Control is yielded here.**
  The `await` keyword is used on the HTTP call.
  The asyncio event loop can run other tasks
  while waiting for the external API response.
end note

' 4. The external API processes the request and sends a response back
' The -->> arrow indicates an asynchronous reply
external_api -->> processing_service: HTTP 200 OK (Data Payload)
deactivate external_api

' 5. The processing_service's task resumes and it processes the data
note right of processing_service
  The `await` completes and execution resumes.
  The service now processes the returned data.
end note

processing_service -> processing_service: Process returned data

' 6. The result is returned to the FastAPI layer
processing_service --> fastapi_service: return processed_data
deactivate processing_service

' 7. FastAPI sends the final HTTP response to the user
fastapi_service --> user: HTTP 200 OK (Processed Data)
deactivate fastapi_service

@enduml